<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>State on JDORO.println</title><link>https://jdoro.github.io/jdoro-blog/tags/state/</link><description>Recent content in State on JDORO.println</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 11 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://jdoro.github.io/jdoro-blog/tags/state/index.xml" rel="self" type="application/rss+xml"/><item><title>React Best Practices: Immutability</title><link>https://jdoro.github.io/jdoro-blog/posts/2024-06-11-react-immutability/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://jdoro.github.io/jdoro-blog/posts/2024-06-11-react-immutability/</guid><description>&lt;p&gt;Immutability is an important concept in React development. Without a solid
understanding of it, you would certainly struggle with state management in your
React applications. In this blog post, we will explore the concept of
immutability, its importance in React, and how to apply it effectively in your
projects.&lt;/p&gt;
&lt;h2 id="what-is-immutability"&gt;What is Immutability?&lt;/h2&gt;
&lt;p&gt;Immutability is the ability of an objects value to be changed after it;s&lt;br&gt;
been created. In simpler terms, once an object is created, its value cannot be
changed. If you want to &amp;ldquo;change&amp;rdquo; the object you need to create a new object with
the desired changes. Employing immutability in your application helps you
ensure that the data inside an object remain consistent and predictable. If
an object is passed into a function and you mutate it within that function, the
caller of the function can no longer be certain that the object will remain
unchanged. This can lead to bugs that are difficult to track down.
Immutability also allows for comparison optimizations by only checking if the
reference to the object has changed, rather than comparing all the values in the
entire object.&lt;/p&gt;</description></item><item><title>React Best Practices: There can only be one… copy of the state</title><link>https://jdoro.github.io/jdoro-blog/posts/2024-06-02-react-state-copies/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://jdoro.github.io/jdoro-blog/posts/2024-06-02-react-state-copies/</guid><description>&lt;p&gt;In React, state is what makes our components dynamic and responsive. It allows
us to hold onto data that can change over time, triggering UI updates when
needed. However, a common pitfall new React developers encounter is creating
multiple copies of the same state when they need to transform the data slightly
or derive new values from the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imagine you&amp;rsquo;re building a product listing page.&lt;/strong&gt; You have a state variable
holding an array of products, each with a &lt;code&gt;price&lt;/code&gt; property. You want to display
both the original price and a discounted price (say, 20% off).&lt;/p&gt;</description></item><item><title>From Objects to State: A Reactjs Developer's Mindset Shift</title><link>https://jdoro.github.io/jdoro-blog/posts/2024-04-13-objects-to-state/</link><pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate><guid>https://jdoro.github.io/jdoro-blog/posts/2024-04-13-objects-to-state/</guid><description>&lt;p&gt;For many developers coming from an Object-Oriented Programming (OOP) background, the transition to Reactjs development can feel like a paradigm shift. In the OOP world, we&amp;rsquo;re conditioned to think in terms of objects – creating them, manipulating their properties, and calling their methods. This naturally translates to a desire to interact with the UI in a similar way: find the DOM element, access its properties, and call methods to modify its behavior.&lt;/p&gt;</description></item></channel></rss>