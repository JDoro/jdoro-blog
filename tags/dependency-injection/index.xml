<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dependency Injection on JDORO.println</title><link>https://jdoro.github.io/jdoro-blog/tags/dependency-injection/</link><description>Recent content in Dependency Injection on JDORO.println</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 02 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://jdoro.github.io/jdoro-blog/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing With Dependency Injection</title><link>https://jdoro.github.io/jdoro-blog/posts/2024-05-02-dependency-injection/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://jdoro.github.io/jdoro-blog/posts/2024-05-02-dependency-injection/</guid><description>&lt;p&gt;Dependency injection (DI) is a software design pattern that might sound complex,
but it&amp;rsquo;s a powerful tool for writing cleaner, more maintainable code. At its core,
DI is about separating the creation of an object from its usage. This might seem
like a minor detail, but it has significant benefits, especially when it comes
to testing.&lt;/p&gt;
&lt;h3 id="why-use-dependency-injection"&gt;Why Use Dependency Injection?&lt;/h3&gt;
&lt;p&gt;There are several reasons to embrace DI, but let&amp;rsquo;s focus on two key advantages:&lt;/p&gt;</description></item></channel></rss>